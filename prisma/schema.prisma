// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  uuid String @unique @default(cuid())
  referenceExternalId String @unique

  projects Project[] @relation("Owner")
  participations ProjectParticipant[] // Relação com os projetos que o usuário participa
}

model Project {
  id Int @id @default(autoincrement())
  uuid String @unique @default(cuid())
  name String

  owner User @relation("Owner", fields: [ownerId], references: [id])
  ownerId Int

  tasks Task[]
  participants ProjectParticipant[] // Relação com os participantes

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

// Tabela intermediária para representar os participantes do projeto
model ProjectParticipant {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  project Project @relation(fields: [projectId], references: [id])
  projectId Int

  createdAt DateTime @default(now())

  @@unique([userId, projectId]) // Garante que o mesmo usuário não seja adicionado mais de uma vez ao mesmo projeto
}

model Task {
  id Int @id @default(autoincrement())
  uuid String @unique @default(cuid())
  title String
  description String?
  completed Boolean @default(false)
  completedAt DateTime?
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id])
  projectId Int
  priority Priority @default(LOW)
  status Status @default(PENDING)
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Status {
  PENDING
  IN_PROGRESS
  DONE
}